name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run TypeScript type check
      run: npm run type-check

    - name: Run linting
      run: npm run lint

    - name: Run unit tests (ESM fixed)
      run: npm run test:unit

    - name: Run tests with coverage
      run: npm run test:coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
      continue-on-error: true

    - name: Build project
      run: npm run build

    - name: Test package installation
      run: |
        npm pack
        npm install -g ./monarchmoney-*.tgz

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build package
      run: npm run build

    - name: Test response formatter performance
      run: node -e "
        const { ResponseFormatter } = require('./dist/cjs/index.js');
        const accounts = Array(1000).fill(null).map((_, i) => ({
          id: String(i),
          displayName: \`Account \${i}\`,
          currentBalance: Math.random() * 10000,
          type: { name: 'checking' },
          includeInNetWorth: true
        }));

        console.log('Testing ResponseFormatter performance with 1000 accounts...');
        const start = Date.now();
        const result = ResponseFormatter.formatAccounts(accounts, 'ultra-light');
        const duration = Date.now() - start;

        console.log(\`Duration: \${duration}ms\`);
        console.log(\`Result length: \${result.length} characters\`);
        console.log(\`Result: \${result}\`);

        if (duration > 100) {
          console.error('❌ Performance test failed: took too long');
          process.exit(1);
        }

        if (result.length > 200) {
          console.error('❌ Performance test failed: result too long');
          process.exit(1);
        }

        console.log('✅ Performance test passed - ResponseFormatter is optimized');
      "

    - name: Test query verbosity selection
      run: node -e "
        const { getQueryForVerbosity } = require('./dist/cjs/index.js');

        console.log('Testing query verbosity selection...');

        const ultraLight = getQueryForVerbosity('accounts', 'ultra-light');
        const light = getQueryForVerbosity('accounts', 'light');
        const standard = getQueryForVerbosity('accounts', 'standard');

        console.log(\`Ultra-light query length: \${ultraLight.length}\`);
        console.log(\`Light query length: \${light.length}\`);
        console.log(\`Standard query length: \${standard.length}\`);

        if (ultraLight.length >= light.length) {
          console.error('❌ Ultra-light query should be shorter than light');
          process.exit(1);
        }

        if (light.length >= standard.length) {
          console.error('❌ Light query should be shorter than standard');
          process.exit(1);
        }

        console.log('✅ Query verbosity optimization working correctly');
      "

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build package
      run: npm run build

    - name: Run integration tests (if credentials available)
      run: |
        if [ -n "$MONARCH_EMAIL" ]; then
          echo "Running integration tests with credentials..."
          npm run test:integration
        else
          echo "⚠️ Integration tests skipped - no credentials provided"
          echo "To run integration tests, set MONARCH_EMAIL, MONARCH_PASSWORD, and MONARCH_MFA_SECRET secrets"
        fi
      env:
        MONARCH_EMAIL: ${{ secrets.MONARCH_EMAIL }}
        MONARCH_PASSWORD: ${{ secrets.MONARCH_PASSWORD }}
        MONARCH_MFA_SECRET: ${{ secrets.MONARCH_MFA_SECRET }}

  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level=moderate

    - name: Check for vulnerabilities
      run: npx audit-ci --moderate